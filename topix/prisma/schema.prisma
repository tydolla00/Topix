generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model contact {
  id         Int      @id @default(autoincrement())
  firstName  String?  @map("first_name")     
  lastName   String?  @map("last_name")
  email      String   @db.VarChar(50)
  subject    String   @db.VarChar(30)
  message    String   @db.VarChar(3000)
}

model Scores{
  id      Int     @id @default(autoincrement())
  gameId  Int?    @map("game_id")
  movieId Int?    @map("movie_id")
  tvId    Int?    @map("tv_id")
  game    game?   @relation(fields: [gameId], references: [id])
  movie   movie?  @relation(fields: [movieId], references: [id])
  tv      tv?     @relation(fields: [tvId], references: [id])     
}
model quizzes {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(100) @unique
  description String  @db.VarChar(1000)
  path        String? @db.VarChar(100)
  url         String  @unique
}

model quiz{
  id        Int     @id @default(autoincrement())
  quizId    String  @unique 
  questions question[]
}
model question{
  id          Int     @id @default(autoincrement())
  quizId      String  @map("quiz_id")
  title       String
  choiceOne   String
  choiceTwo   String
  choiceThree String
  choiceFour  String
  quiz        quiz    @relation(fields: [quizId], references: [quizId])
}
model games {
  id          Int       @id @default(autoincrement())
  img         String      
  description String
  path        String    @unique
}

model game{
  id          Int     @id @default(autoincrement())
  createdBy   String  @map("created_by")
  title       String
  gameId      String  @map("game_id") @default(uuid()) @unique
  img         String?
  description String
  scores      Scores[]
  topix       topix[] 
}
model movies {
  id          Int       @id @default(autoincrement())
  img         String      
  description String
  path        String    @unique
}

model movie{
  id          Int     @id @default(autoincrement())
  createdBy   String  @map("created_by")
  title       String
  movieId     String  @map("movie_id") @unique
  img         String?
  description String
  scores      Scores[]
  topix       topix[] 
}


model tvs{
  id          Int       @id @default(autoincrement())
  img         String      
  description String
  path        String    @unique
}

model tv {
  id          Int     @id @default(autoincrement())
  createdBy   String  @map("created_by")
  title       String
  tvId        String  @map("tv_id") @unique
  img         String?
  description String
  scores      Scores[]
  topix       topix[] 
}
model topix {
  id      Int     @id @default(autoincrement())
  title   String
  gameId  String? @map("game_id")
  movieId String? @map("movie_id")
  tvId    String? @map("tv_id")
  img     String?  
  link    String?
  game    game?   @relation(fields: [gameId], references: [gameId])
  movie   movie?  @relation(fields: [movieId], references: [movieId])
  tv      tv?     @relation(fields: [tvId], references: [tvId])
}


model account {
  id                 String      @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?     @db.Text
  access_token       String?     @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?     @db.Text
  session_state      String?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  user user @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model session {
  id           String      @id @default(cuid())
  sessionToken String      @unique
  userId       String
  expires      DateTime
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  user         user        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model user {
  id            String      @id @default(cuid())
  username      String?     @unique @db.VarChar(50)
  firstName     String?     @map("first_name")     
  lastName      String?     @map("last_name") 
  name          String?       
  email         String      @unique
  password      String?
  emailVerified DateTime?
  image         String?
  birthday      DateTime? 
  pronouns      Pronouns?
  provider      Provider?
  createdAt     DateTime?    @default(now())
  updatedAt     DateTime?    @updatedAt
  accounts      account[]
  sessions      session[]
}

model verificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


enum Provider{
  google
  github
  credentials
}

enum Pronouns{
  HeHim
  SheHer
  Other
}