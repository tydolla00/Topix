generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model contact {
  id         Int    @id @default(autoincrement())
  first_name String @db.VarChar(30)
  last_name  String @db.VarChar(30)
  email      String @db.VarChar(50)
  subject    String @db.VarChar(30)
  message    String @db.VarChar(3000)
}

model games {
  id       Int      @id @default(autoincrement())
  games_id Int?
  name     String   @db.VarChar(100)
  brand    String?  @db.VarChar(100)
  timeline DateTime @db.Date
  schema   schema?  @relation(fields: [games_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_games")
}

model movies {
  id        Int      @id @default(autoincrement())
  movies_id Int?
  name      String   @db.VarChar(100)
  genre     String   @db.VarChar(100)
  timeline  DateTime @db.Date
  schema    schema?  @relation(fields: [movies_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_movies")
}

model quizzes {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(100)
  description String  @db.VarChar(1000)
  path        String? @db.VarChar(100)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model schema {
  id     Int      @id @default(autoincrement())
  type   String?  @db.VarChar(10)
  name   String?  @db.VarChar(100)
  path   String?  @db.VarChar(100)
  games  games[]
  movies movies[]
  tv     tv[]
  users  users[]
}

model topix {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(100)
  description String  @db.VarChar(1000)
  path        String? @db.VarChar(100)
}

model tv {
  id       Int      @id @default(autoincrement())
  tv_id    Int?
  name     String   @db.VarChar(100)
  genre    String   @db.VarChar(100)
  channel  String   @db.VarChar(100)
  timeline DateTime @db.Date
  schema   schema?  @relation(fields: [tv_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_tv")
}

model users {
  id              Int     @id @default(autoincrement())
  users_id        Int?
  username        String? @unique @db.VarChar(50)
  email           String? @unique @db.VarChar(50)
  password        String? @db.VarChar(60)
  first_name      String? @db.VarChar(30)
  last_name       String? @db.VarChar(30)
  profile_picture String? @db.VarChar(100)
  schema          schema? @relation(fields: [users_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
